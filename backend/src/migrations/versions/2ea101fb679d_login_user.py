"""login user

Revision ID: 2ea101fb679d
Revises: a00f9e851f01
Create Date: 2025-05-05 13:21:46.652264

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = '2ea101fb679d'
down_revision: Union[str, None] = 'a00f9e851f01'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email'))
    )
    public_increment_document_number = PGFunction(
        schema="public",
        signature="increment_document_number()",
        definition="RETURNS trigger AS\n    $$\n    DECLARE\n        current_year INTEGER := EXTRACT(YEAR FROM NEW.document_datetime);\n        new_counter INTEGER;\n    BEGIN\n        -- вставляем новую строку в счётчик (стартуя с 1) или увеличиваем существующий\n        INSERT INTO document_number_counters (id, document_type_id, year, counter)\n        VALUES (gen_random_uuid(), NEW.document_type_id, current_year, 1)\n        ON CONFLICT (document_type_id, year)\n        DO UPDATE SET counter = document_number_counters.counter + 1\n        RETURNING counter INTO new_counter;\n\n        -- проставляем в новый документ номер и шаблонное имя\n        NEW.document_number := new_counter;\n\n        IF NEW.name IS NULL OR NEW.name = '' THEN\n            NEW.name := format(\n                'document%s_%s',\n                lpad(new_counter::TEXT, 3, '0'),\n                current_year\n            );\n        END IF;\n\n        RETURN NEW;\n    END;\n    $$ LANGUAGE plpgsql"
    )
    op.replace_entity(public_increment_document_number)

    public_documents_set_document_number_documents = PGTrigger(
        schema="public",
        signature="set_document_number_documents",
        on_entity="public.documents",
        is_constraint=False,
        definition='BEFORE INSERT ON documents\n    FOR EACH ROW\n    EXECUTE FUNCTION increment_document_number()'
    )
    op.create_entity(public_documents_set_document_number_documents)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_documents_set_document_number_documents = PGTrigger(
        schema="public",
        signature="set_document_number_documents",
        on_entity="public.documents",
        is_constraint=False,
        definition='BEFORE INSERT ON documents\n    FOR EACH ROW\n    EXECUTE FUNCTION increment_document_number()'
    )
    op.drop_entity(public_documents_set_document_number_documents)

    public_increment_document_number = PGFunction(
        schema="public",
        signature="increment_document_number()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n    DECLARE\n        current_year INTEGER := EXTRACT(YEAR FROM NEW.document_datetime);\n        new_counter INTEGER;\n    BEGIN\n        -- вставляем новую строку в счётчик (стартуя с 1) или увеличиваем существующий\n        INSERT INTO document_number_counters (id, document_type_id, year, counter)\n        VALUES (gen_random_uuid(), NEW.document_type_id, current_year, 1)\n        ON CONFLICT (document_type_id, year)\n        DO UPDATE SET counter = document_number_counters.counter + 1\n        RETURNING counter INTO new_counter;\n\n        -- проставляем в новый документ номер и шаблонное имя\n        NEW.document_number := new_counter;\n    \n        IF NEW.name IS NULL OR NEW.name = '' THEN\n            NEW.name := format(\n                'base_recipe_%s_%s',\n                lpad(new_counter::TEXT, 3, '0'),\n                current_year\n            );\n        END IF;\n\n        RETURN NEW;\n    END;\n    $function$"
    )
    op.replace_entity(public_increment_document_number)
    op.drop_table('users')
    # ### end Alembic commands ###
